// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tracespan_handler_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOMATICALLY GENERATED BY MIXGEN.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tracespan {
  /// <summary>
  /// HandleTraceSpanService is implemented by backends that wants to handle request-time 'tracespan' instances.
  /// </summary>
  public static partial class HandleTraceSpanService
  {
    static readonly string __ServiceName = "tracespan.HandleTraceSpanService";

    static readonly grpc::Marshaller<global::Tracespan.HandleTraceSpanRequest> __Marshaller_HandleTraceSpanRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tracespan.HandleTraceSpanRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Istio.Mixer.Adapter.Model.V1Beta1.ReportResult> __Marshaller_ReportResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Istio.Mixer.Adapter.Model.V1Beta1.ReportResult.Parser.ParseFrom);

    static readonly grpc::Method<global::Tracespan.HandleTraceSpanRequest, global::Istio.Mixer.Adapter.Model.V1Beta1.ReportResult> __Method_HandleTraceSpan = new grpc::Method<global::Tracespan.HandleTraceSpanRequest, global::Istio.Mixer.Adapter.Model.V1Beta1.ReportResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HandleTraceSpan",
        __Marshaller_HandleTraceSpanRequest,
        __Marshaller_ReportResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tracespan.TracespanHandlerServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of HandleTraceSpanService</summary>
    public abstract partial class HandleTraceSpanServiceBase
    {
      /// <summary>
      /// HandleTraceSpan is called by Mixer at request-time to deliver 'tracespan' instances to the backend.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Istio.Mixer.Adapter.Model.V1Beta1.ReportResult> HandleTraceSpan(global::Tracespan.HandleTraceSpanRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for HandleTraceSpanService</summary>
    public partial class HandleTraceSpanServiceClient : grpc::ClientBase<HandleTraceSpanServiceClient>
    {
      /// <summary>Creates a new client for HandleTraceSpanService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public HandleTraceSpanServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for HandleTraceSpanService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public HandleTraceSpanServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected HandleTraceSpanServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected HandleTraceSpanServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// HandleTraceSpan is called by Mixer at request-time to deliver 'tracespan' instances to the backend.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Istio.Mixer.Adapter.Model.V1Beta1.ReportResult HandleTraceSpan(global::Tracespan.HandleTraceSpanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleTraceSpan(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleTraceSpan is called by Mixer at request-time to deliver 'tracespan' instances to the backend.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Istio.Mixer.Adapter.Model.V1Beta1.ReportResult HandleTraceSpan(global::Tracespan.HandleTraceSpanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HandleTraceSpan, null, options, request);
      }
      /// <summary>
      /// HandleTraceSpan is called by Mixer at request-time to deliver 'tracespan' instances to the backend.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Istio.Mixer.Adapter.Model.V1Beta1.ReportResult> HandleTraceSpanAsync(global::Tracespan.HandleTraceSpanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleTraceSpanAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleTraceSpan is called by Mixer at request-time to deliver 'tracespan' instances to the backend.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Istio.Mixer.Adapter.Model.V1Beta1.ReportResult> HandleTraceSpanAsync(global::Tracespan.HandleTraceSpanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HandleTraceSpan, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override HandleTraceSpanServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new HandleTraceSpanServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(HandleTraceSpanServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_HandleTraceSpan, serviceImpl.HandleTraceSpan).Build();
    }

  }
}
#endregion
