// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tracespan_handler_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tracespan {

  /// <summary>Holder for reflection information generated from tracespan_handler_service.proto</summary>
  public static partial class TracespanHandlerServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for tracespan_handler_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TracespanHandlerServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch90cmFjZXNwYW5faGFuZGxlcl9zZXJ2aWNlLnByb3RvEgl0cmFjZXNwYW4a",
            "LG1peGVyL2FkYXB0ZXIvbW9kZWwvdjFiZXRhMS9leHRlbnNpb25zLnByb3Rv",
            "Ghlnb29nbGUvcHJvdG9idWYvYW55LnByb3RvGihtaXhlci9hZGFwdGVyL21v",
            "ZGVsL3YxYmV0YTEvcmVwb3J0LnByb3RvGhlwb2xpY3kvdjFiZXRhMS90eXBl",
            "LnByb3RvGh9wb2xpY3kvdjFiZXRhMS92YWx1ZV90eXBlLnByb3RvIoMBChZI",
            "YW5kbGVUcmFjZVNwYW5SZXF1ZXN0EikKCWluc3RhbmNlcxgBIAMoCzIWLnRy",
            "YWNlc3Bhbi5JbnN0YW5jZU1zZxIsCg5hZGFwdGVyX2NvbmZpZxgCIAEoCzIU",
            "Lmdvb2dsZS5wcm90b2J1Zi5BbnkSEAoIZGVkdXBfaWQYAyABKAkiwAUKC0lu",
            "c3RhbmNlTXNnEg8KBG5hbWUYr8q8IiABKAkSEAoIdHJhY2VfaWQYASABKAkS",
            "DwoHc3Bhbl9pZBgCIAEoCRIWCg5wYXJlbnRfc3Bhbl9pZBgDIAEoCRIRCglz",
            "cGFuX25hbWUYBCABKAkSMwoKc3RhcnRfdGltZRgFIAEoCzIfLmlzdGlvLnBv",
            "bGljeS52MWJldGExLlRpbWVTdGFtcBIxCghlbmRfdGltZRgGIAEoCzIfLmlz",
            "dGlvLnBvbGljeS52MWJldGExLlRpbWVTdGFtcBI3CglzcGFuX3RhZ3MYByAD",
            "KAsyJC50cmFjZXNwYW4uSW5zdGFuY2VNc2cuU3BhblRhZ3NFbnRyeRIWCg5o",
            "dHRwU3RhdHVzQ29kZRgIIAEoAxITCgtjbGllbnRfc3BhbhgJIAEoCBIeChZy",
            "ZXdyaXRlX2NsaWVudF9zcGFuX2lkGAogASgIEhMKC3NvdXJjZV9uYW1lGAsg",
            "ASgJEjIKCXNvdXJjZV9pcBgMIAEoCzIfLmlzdGlvLnBvbGljeS52MWJldGEx",
            "LklQQWRkcmVzcxIYChBkZXN0aW5hdGlvbl9uYW1lGA0gASgJEjcKDmRlc3Rp",
            "bmF0aW9uX2lwGA4gASgLMh8uaXN0aW8ucG9saWN5LnYxYmV0YTEuSVBBZGRy",
            "ZXNzEhQKDHJlcXVlc3Rfc2l6ZRgPIAEoAxIaChJyZXF1ZXN0X3RvdGFsX3Np",
            "emUYECABKAMSFQoNcmVzcG9uc2Vfc2l6ZRgRIAEoAxIbChNyZXNwb25zZV90",
            "b3RhbF9zaXplGBIgASgDEhQKDGFwaV9wcm90b2NvbBgTIAEoCRpMCg1TcGFu",
            "VGFnc0VudHJ5EgsKA2tleRgBIAEoCRIqCgV2YWx1ZRgCIAEoCzIbLmlzdGlv",
            "LnBvbGljeS52MWJldGExLlZhbHVlOgI4ASKKAQoEVHlwZRIwCglzcGFuX3Rh",
            "Z3MYByADKAsyHS50cmFjZXNwYW4uVHlwZS5TcGFuVGFnc0VudHJ5GlAKDVNw",
            "YW5UYWdzRW50cnkSCwoDa2V5GAEgASgJEi4KBXZhbHVlGAIgASgOMh8uaXN0",
            "aW8ucG9saWN5LnYxYmV0YTEuVmFsdWVUeXBlOgI4ASKSBAoNSW5zdGFuY2VQ",
            "YXJhbRIQCgh0cmFjZV9pZBgBIAEoCRIPCgdzcGFuX2lkGAIgASgJEhYKDnBh",
            "cmVudF9zcGFuX2lkGAMgASgJEhEKCXNwYW5fbmFtZRgEIAEoCRISCgpzdGFy",
            "dF90aW1lGAUgASgJEhAKCGVuZF90aW1lGAYgASgJEjkKCXNwYW5fdGFncxgH",
            "IAMoCzImLnRyYWNlc3Bhbi5JbnN0YW5jZVBhcmFtLlNwYW5UYWdzRW50cnkS",
            "FgoOaHR0cFN0YXR1c0NvZGUYCCABKAkSEwoLY2xpZW50X3NwYW4YCSABKAkS",
            "HgoWcmV3cml0ZV9jbGllbnRfc3Bhbl9pZBgKIAEoCRITCgtzb3VyY2VfbmFt",
            "ZRgLIAEoCRIRCglzb3VyY2VfaXAYDCABKAkSGAoQZGVzdGluYXRpb25fbmFt",
            "ZRgNIAEoCRIWCg5kZXN0aW5hdGlvbl9pcBgOIAEoCRIUCgxyZXF1ZXN0X3Np",
            "emUYDyABKAkSGgoScmVxdWVzdF90b3RhbF9zaXplGBAgASgJEhUKDXJlc3Bv",
            "bnNlX3NpemUYESABKAkSGwoTcmVzcG9uc2VfdG90YWxfc2l6ZRgSIAEoCRIU",
            "CgxhcGlfcHJvdG9jb2wYEyABKAkaLwoNU3BhblRhZ3NFbnRyeRILCgNrZXkY",
            "ASABKAkSDQoFdmFsdWUYAiABKAk6AjgBMn8KFkhhbmRsZVRyYWNlU3BhblNl",
            "cnZpY2USZQoPSGFuZGxlVHJhY2VTcGFuEiEudHJhY2VzcGFuLkhhbmRsZVRy",
            "YWNlU3BhblJlcXVlc3QaLy5pc3Rpby5taXhlci5hZGFwdGVyLm1vZGVsLnYx",
            "YmV0YTEuUmVwb3J0UmVzdWx0QhX40uSTAgGC3eSTAgl0cmFjZXNwYW5iBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Istio.Mixer.Adapter.Model.V1Beta1.ExtensionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Istio.Mixer.Adapter.Model.V1Beta1.ReportReflection.Descriptor, global::Istio.Policy.V1Beta1.TypeReflection.Descriptor, global::Istio.Policy.V1Beta1.ValueTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracespan.HandleTraceSpanRequest), global::Tracespan.HandleTraceSpanRequest.Parser, new[]{ "Instances", "AdapterConfig", "DedupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracespan.InstanceMsg), global::Tracespan.InstanceMsg.Parser, new[]{ "Name", "TraceId", "SpanId", "ParentSpanId", "SpanName", "StartTime", "EndTime", "SpanTags", "HttpStatusCode", "ClientSpan", "RewriteClientSpanId", "SourceName", "SourceIp", "DestinationName", "DestinationIp", "RequestSize", "RequestTotalSize", "ResponseSize", "ResponseTotalSize", "ApiProtocol" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracespan.Type), global::Tracespan.Type.Parser, new[]{ "SpanTags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracespan.InstanceParam), global::Tracespan.InstanceParam.Parser, new[]{ "TraceId", "SpanId", "ParentSpanId", "SpanName", "StartTime", "EndTime", "SpanTags", "HttpStatusCode", "ClientSpan", "RewriteClientSpanId", "SourceName", "SourceIp", "DestinationName", "DestinationIp", "RequestSize", "RequestTotalSize", "ResponseSize", "ResponseTotalSize", "ApiProtocol" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request message for HandleTraceSpan method.
  /// </summary>
  public sealed partial class HandleTraceSpanRequest : pb::IMessage<HandleTraceSpanRequest> {
    private static readonly pb::MessageParser<HandleTraceSpanRequest> _parser = new pb::MessageParser<HandleTraceSpanRequest>(() => new HandleTraceSpanRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandleTraceSpanRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracespan.TracespanHandlerServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandleTraceSpanRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandleTraceSpanRequest(HandleTraceSpanRequest other) : this() {
      instances_ = other.instances_.Clone();
      adapterConfig_ = other.adapterConfig_ != null ? other.adapterConfig_.Clone() : null;
      dedupId_ = other.dedupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandleTraceSpanRequest Clone() {
      return new HandleTraceSpanRequest(this);
    }

    /// <summary>Field number for the "instances" field.</summary>
    public const int InstancesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tracespan.InstanceMsg> _repeated_instances_codec
        = pb::FieldCodec.ForMessage(10, global::Tracespan.InstanceMsg.Parser);
    private readonly pbc::RepeatedField<global::Tracespan.InstanceMsg> instances_ = new pbc::RepeatedField<global::Tracespan.InstanceMsg>();
    /// <summary>
    /// 'tracespan' instances.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tracespan.InstanceMsg> Instances {
      get { return instances_; }
    }

    /// <summary>Field number for the "adapter_config" field.</summary>
    public const int AdapterConfigFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Any adapterConfig_;
    /// <summary>
    /// Adapter specific handler configuration.
    ///
    /// Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend]
    /// service and therefore opt to receive handler configuration during session creation through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    /// call. In that case, adapter_config will have type_url as 'google.protobuf.Any.type_url' and would contain string
    /// value of session_id (returned from InfrastructureBackend.CreateSession).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any AdapterConfig {
      get { return adapterConfig_; }
      set {
        adapterConfig_ = value;
      }
    }

    /// <summary>Field number for the "dedup_id" field.</summary>
    public const int DedupIdFieldNumber = 3;
    private string dedupId_ = "";
    /// <summary>
    /// Id to dedupe identical requests from Mixer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DedupId {
      get { return dedupId_; }
      set {
        dedupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandleTraceSpanRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandleTraceSpanRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instances_.Equals(other.instances_)) return false;
      if (!object.Equals(AdapterConfig, other.AdapterConfig)) return false;
      if (DedupId != other.DedupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instances_.GetHashCode();
      if (adapterConfig_ != null) hash ^= AdapterConfig.GetHashCode();
      if (DedupId.Length != 0) hash ^= DedupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      instances_.WriteTo(output, _repeated_instances_codec);
      if (adapterConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AdapterConfig);
      }
      if (DedupId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DedupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += instances_.CalculateSize(_repeated_instances_codec);
      if (adapterConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdapterConfig);
      }
      if (DedupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DedupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandleTraceSpanRequest other) {
      if (other == null) {
        return;
      }
      instances_.Add(other.instances_);
      if (other.adapterConfig_ != null) {
        if (adapterConfig_ == null) {
          adapterConfig_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        AdapterConfig.MergeFrom(other.AdapterConfig);
      }
      if (other.DedupId.Length != 0) {
        DedupId = other.DedupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instances_.AddEntriesFrom(input, _repeated_instances_codec);
            break;
          }
          case 18: {
            if (adapterConfig_ == null) {
              adapterConfig_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(adapterConfig_);
            break;
          }
          case 26: {
            DedupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Contains instance payload for 'tracespan' template. This is passed to infrastructure backends during request-time
  /// through HandleTraceSpanService.HandleTraceSpan.
  /// </summary>
  public sealed partial class InstanceMsg : pb::IMessage<InstanceMsg> {
    private static readonly pb::MessageParser<InstanceMsg> _parser = new pb::MessageParser<InstanceMsg>(() => new InstanceMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstanceMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracespan.TracespanHandlerServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceMsg(InstanceMsg other) : this() {
      name_ = other.name_;
      traceId_ = other.traceId_;
      spanId_ = other.spanId_;
      parentSpanId_ = other.parentSpanId_;
      spanName_ = other.spanName_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      spanTags_ = other.spanTags_.Clone();
      httpStatusCode_ = other.httpStatusCode_;
      clientSpan_ = other.clientSpan_;
      rewriteClientSpanId_ = other.rewriteClientSpanId_;
      sourceName_ = other.sourceName_;
      sourceIp_ = other.sourceIp_ != null ? other.sourceIp_.Clone() : null;
      destinationName_ = other.destinationName_;
      destinationIp_ = other.destinationIp_ != null ? other.destinationIp_.Clone() : null;
      requestSize_ = other.requestSize_;
      requestTotalSize_ = other.requestTotalSize_;
      responseSize_ = other.responseSize_;
      responseTotalSize_ = other.responseTotalSize_;
      apiProtocol_ = other.apiProtocol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceMsg Clone() {
      return new InstanceMsg(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 72295727;
    private string name_ = "";
    /// <summary>
    /// Name of the instance as specified in configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trace_id" field.</summary>
    public const int TraceIdFieldNumber = 1;
    private string traceId_ = "";
    /// <summary>
    /// Trace ID is the unique identifier for a trace. All spans from the same
    /// trace share the same Trace ID.
    /// 
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "span_id" field.</summary>
    public const int SpanIdFieldNumber = 2;
    private string spanId_ = "";
    /// <summary>
    /// Span ID is the unique identifier for a span within a trace. It is assigned
    /// when the span is created.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpanId {
      get { return spanId_; }
      set {
        spanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_span_id" field.</summary>
    public const int ParentSpanIdFieldNumber = 3;
    private string parentSpanId_ = "";
    /// <summary>
    /// Parent Span ID is the unique identifier for a parent span of this span
    /// instance. If this is a root span, then this field MUST be empty.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "span_name" field.</summary>
    public const int SpanNameFieldNumber = 4;
    private string spanName_ = "";
    /// <summary>
    /// Span name is a description of the span's operation.
    /// 
    /// For example, the name can be a qualified method name or a file name
    /// and a line number where the operation is called. A best practice is to use
    /// the same display name within an application and at the same call point.
    /// This makes it easier to correlate spans in different traces.
    /// 
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpanName {
      get { return spanName_; }
      set {
        spanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private global::Istio.Policy.V1Beta1.TimeStamp startTime_;
    /// <summary>
    /// The start time of the span.
    /// 
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Istio.Policy.V1Beta1.TimeStamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private global::Istio.Policy.V1Beta1.TimeStamp endTime_;
    /// <summary>
    /// The end time of the span.
    /// 
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Istio.Policy.V1Beta1.TimeStamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "span_tags" field.</summary>
    public const int SpanTagsFieldNumber = 7;
    private static readonly pbc::MapField<string, global::Istio.Policy.V1Beta1.Value>.Codec _map_spanTags_codec
        = new pbc::MapField<string, global::Istio.Policy.V1Beta1.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Istio.Policy.V1Beta1.Value.Parser), 58);
    private readonly pbc::MapField<string, global::Istio.Policy.V1Beta1.Value> spanTags_ = new pbc::MapField<string, global::Istio.Policy.V1Beta1.Value>();
    /// <summary>
    /// Span tags are a set of &lt; key, value > pairs that provide metadata for the
    /// entire span. The values can be specified in the form of expressions.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Istio.Policy.V1Beta1.Value> SpanTags {
      get { return spanTags_; }
    }

    /// <summary>Field number for the "httpStatusCode" field.</summary>
    public const int HttpStatusCodeFieldNumber = 8;
    private long httpStatusCode_;
    /// <summary>
    /// HTTP status code used to set the span status. If unset or set to 0, the
    /// span status will be assumed to be successful.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HttpStatusCode {
      get { return httpStatusCode_; }
      set {
        httpStatusCode_ = value;
      }
    }

    /// <summary>Field number for the "client_span" field.</summary>
    public const int ClientSpanFieldNumber = 9;
    private bool clientSpan_;
    /// <summary>
    /// client_span indicates the span kind. True for client spans and False or
    /// not provided for server spans. Using bool instead of enum is a temporary
    /// work around since mixer expression language does not yet support enum
    /// type.
    /// 
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClientSpan {
      get { return clientSpan_; }
      set {
        clientSpan_ = value;
      }
    }

    /// <summary>Field number for the "rewrite_client_span_id" field.</summary>
    public const int RewriteClientSpanIdFieldNumber = 10;
    private bool rewriteClientSpanId_;
    /// <summary>
    /// rewrite_client_span_id is used to indicate whether to create a new client
    /// span id to accommodate Zipkin shared span model. Some tracing systems like
    /// Stackdriver separates a RPC into client span and server span. To solve this
    /// incompatibility, deterministically rewriting both span id of client span and
    /// parent span id of server span to the same newly generated id.
    /// 
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RewriteClientSpanId {
      get { return rewriteClientSpanId_; }
      set {
        rewriteClientSpanId_ = value;
      }
    }

    /// <summary>Field number for the "source_name" field.</summary>
    public const int SourceNameFieldNumber = 11;
    private string sourceName_ = "";
    /// <summary>
    /// Identifies the source (client side) of this span.
    /// Should usually be set to `source.workload.name`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceName {
      get { return sourceName_; }
      set {
        sourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_ip" field.</summary>
    public const int SourceIpFieldNumber = 12;
    private global::Istio.Policy.V1Beta1.IPAddress sourceIp_;
    /// <summary>
    /// Client IP address. Should usually be set to `source.ip`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Istio.Policy.V1Beta1.IPAddress SourceIp {
      get { return sourceIp_; }
      set {
        sourceIp_ = value;
      }
    }

    /// <summary>Field number for the "destination_name" field.</summary>
    public const int DestinationNameFieldNumber = 13;
    private string destinationName_ = "";
    /// <summary>
    /// Identifies the destination (server side) of this span.
    /// Should usually be set to `destination.workload.name`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationName {
      get { return destinationName_; }
      set {
        destinationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_ip" field.</summary>
    public const int DestinationIpFieldNumber = 14;
    private global::Istio.Policy.V1Beta1.IPAddress destinationIp_;
    /// <summary>
    /// Server IP address. Should usually be set to `destination.ip`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Istio.Policy.V1Beta1.IPAddress DestinationIp {
      get { return destinationIp_; }
      set {
        destinationIp_ = value;
      }
    }

    /// <summary>Field number for the "request_size" field.</summary>
    public const int RequestSizeFieldNumber = 15;
    private long requestSize_;
    /// <summary>
    /// Request body size. Should usually be set to `request.size`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestSize {
      get { return requestSize_; }
      set {
        requestSize_ = value;
      }
    }

    /// <summary>Field number for the "request_total_size" field.</summary>
    public const int RequestTotalSizeFieldNumber = 16;
    private long requestTotalSize_;
    /// <summary>
    /// Total request size (headers and body).
    /// Should usually be set to `request.total_size`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestTotalSize {
      get { return requestTotalSize_; }
      set {
        requestTotalSize_ = value;
      }
    }

    /// <summary>Field number for the "response_size" field.</summary>
    public const int ResponseSizeFieldNumber = 17;
    private long responseSize_;
    /// <summary>
    /// Response body size. Should usually be set to `response.size`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResponseSize {
      get { return responseSize_; }
      set {
        responseSize_ = value;
      }
    }

    /// <summary>Field number for the "response_total_size" field.</summary>
    public const int ResponseTotalSizeFieldNumber = 18;
    private long responseTotalSize_;
    /// <summary>
    /// Response total size (headers and body).
    /// Should usually be set to `response.total_size`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResponseTotalSize {
      get { return responseTotalSize_; }
      set {
        responseTotalSize_ = value;
      }
    }

    /// <summary>Field number for the "api_protocol" field.</summary>
    public const int ApiProtocolFieldNumber = 19;
    private string apiProtocol_ = "";
    /// <summary>
    /// One of "http", "https", or "grpc" or any other value of
    /// the `api.protocol` attribute. Should usually be set to `api.protocol`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApiProtocol {
      get { return apiProtocol_; }
      set {
        apiProtocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstanceMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstanceMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (TraceId != other.TraceId) return false;
      if (SpanId != other.SpanId) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (SpanName != other.SpanName) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (!SpanTags.Equals(other.SpanTags)) return false;
      if (HttpStatusCode != other.HttpStatusCode) return false;
      if (ClientSpan != other.ClientSpan) return false;
      if (RewriteClientSpanId != other.RewriteClientSpanId) return false;
      if (SourceName != other.SourceName) return false;
      if (!object.Equals(SourceIp, other.SourceIp)) return false;
      if (DestinationName != other.DestinationName) return false;
      if (!object.Equals(DestinationIp, other.DestinationIp)) return false;
      if (RequestSize != other.RequestSize) return false;
      if (RequestTotalSize != other.RequestTotalSize) return false;
      if (ResponseSize != other.ResponseSize) return false;
      if (ResponseTotalSize != other.ResponseTotalSize) return false;
      if (ApiProtocol != other.ApiProtocol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (SpanId.Length != 0) hash ^= SpanId.GetHashCode();
      if (ParentSpanId.Length != 0) hash ^= ParentSpanId.GetHashCode();
      if (SpanName.Length != 0) hash ^= SpanName.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      hash ^= SpanTags.GetHashCode();
      if (HttpStatusCode != 0L) hash ^= HttpStatusCode.GetHashCode();
      if (ClientSpan != false) hash ^= ClientSpan.GetHashCode();
      if (RewriteClientSpanId != false) hash ^= RewriteClientSpanId.GetHashCode();
      if (SourceName.Length != 0) hash ^= SourceName.GetHashCode();
      if (sourceIp_ != null) hash ^= SourceIp.GetHashCode();
      if (DestinationName.Length != 0) hash ^= DestinationName.GetHashCode();
      if (destinationIp_ != null) hash ^= DestinationIp.GetHashCode();
      if (RequestSize != 0L) hash ^= RequestSize.GetHashCode();
      if (RequestTotalSize != 0L) hash ^= RequestTotalSize.GetHashCode();
      if (ResponseSize != 0L) hash ^= ResponseSize.GetHashCode();
      if (ResponseTotalSize != 0L) hash ^= ResponseTotalSize.GetHashCode();
      if (ApiProtocol.Length != 0) hash ^= ApiProtocol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TraceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TraceId);
      }
      if (SpanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpanId);
      }
      if (ParentSpanId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParentSpanId);
      }
      if (SpanName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SpanName);
      }
      if (startTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EndTime);
      }
      spanTags_.WriteTo(output, _map_spanTags_codec);
      if (HttpStatusCode != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(HttpStatusCode);
      }
      if (ClientSpan != false) {
        output.WriteRawTag(72);
        output.WriteBool(ClientSpan);
      }
      if (RewriteClientSpanId != false) {
        output.WriteRawTag(80);
        output.WriteBool(RewriteClientSpanId);
      }
      if (SourceName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SourceName);
      }
      if (sourceIp_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SourceIp);
      }
      if (DestinationName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(DestinationName);
      }
      if (destinationIp_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(DestinationIp);
      }
      if (RequestSize != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(RequestSize);
      }
      if (RequestTotalSize != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(RequestTotalSize);
      }
      if (ResponseSize != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(ResponseSize);
      }
      if (ResponseTotalSize != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(ResponseTotalSize);
      }
      if (ApiProtocol.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ApiProtocol);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(250, 210, 228, 147, 2);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 5 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceId);
      }
      if (SpanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpanId);
      }
      if (ParentSpanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentSpanId);
      }
      if (SpanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpanName);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      size += spanTags_.CalculateSize(_map_spanTags_codec);
      if (HttpStatusCode != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HttpStatusCode);
      }
      if (ClientSpan != false) {
        size += 1 + 1;
      }
      if (RewriteClientSpanId != false) {
        size += 1 + 1;
      }
      if (SourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceName);
      }
      if (sourceIp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceIp);
      }
      if (DestinationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationName);
      }
      if (destinationIp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestinationIp);
      }
      if (RequestSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequestSize);
      }
      if (RequestTotalSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RequestTotalSize);
      }
      if (ResponseSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ResponseSize);
      }
      if (ResponseTotalSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ResponseTotalSize);
      }
      if (ApiProtocol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ApiProtocol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstanceMsg other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.SpanId.Length != 0) {
        SpanId = other.SpanId;
      }
      if (other.ParentSpanId.Length != 0) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.SpanName.Length != 0) {
        SpanName = other.SpanName;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Istio.Policy.V1Beta1.TimeStamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          endTime_ = new global::Istio.Policy.V1Beta1.TimeStamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      spanTags_.Add(other.spanTags_);
      if (other.HttpStatusCode != 0L) {
        HttpStatusCode = other.HttpStatusCode;
      }
      if (other.ClientSpan != false) {
        ClientSpan = other.ClientSpan;
      }
      if (other.RewriteClientSpanId != false) {
        RewriteClientSpanId = other.RewriteClientSpanId;
      }
      if (other.SourceName.Length != 0) {
        SourceName = other.SourceName;
      }
      if (other.sourceIp_ != null) {
        if (sourceIp_ == null) {
          sourceIp_ = new global::Istio.Policy.V1Beta1.IPAddress();
        }
        SourceIp.MergeFrom(other.SourceIp);
      }
      if (other.DestinationName.Length != 0) {
        DestinationName = other.DestinationName;
      }
      if (other.destinationIp_ != null) {
        if (destinationIp_ == null) {
          destinationIp_ = new global::Istio.Policy.V1Beta1.IPAddress();
        }
        DestinationIp.MergeFrom(other.DestinationIp);
      }
      if (other.RequestSize != 0L) {
        RequestSize = other.RequestSize;
      }
      if (other.RequestTotalSize != 0L) {
        RequestTotalSize = other.RequestTotalSize;
      }
      if (other.ResponseSize != 0L) {
        ResponseSize = other.ResponseSize;
      }
      if (other.ResponseTotalSize != 0L) {
        ResponseTotalSize = other.ResponseTotalSize;
      }
      if (other.ApiProtocol.Length != 0) {
        ApiProtocol = other.ApiProtocol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TraceId = input.ReadString();
            break;
          }
          case 18: {
            SpanId = input.ReadString();
            break;
          }
          case 26: {
            ParentSpanId = input.ReadString();
            break;
          }
          case 34: {
            SpanName = input.ReadString();
            break;
          }
          case 42: {
            if (startTime_ == null) {
              startTime_ = new global::Istio.Policy.V1Beta1.TimeStamp();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 50: {
            if (endTime_ == null) {
              endTime_ = new global::Istio.Policy.V1Beta1.TimeStamp();
            }
            input.ReadMessage(endTime_);
            break;
          }
          case 58: {
            spanTags_.AddEntriesFrom(input, _map_spanTags_codec);
            break;
          }
          case 64: {
            HttpStatusCode = input.ReadInt64();
            break;
          }
          case 72: {
            ClientSpan = input.ReadBool();
            break;
          }
          case 80: {
            RewriteClientSpanId = input.ReadBool();
            break;
          }
          case 90: {
            SourceName = input.ReadString();
            break;
          }
          case 98: {
            if (sourceIp_ == null) {
              sourceIp_ = new global::Istio.Policy.V1Beta1.IPAddress();
            }
            input.ReadMessage(sourceIp_);
            break;
          }
          case 106: {
            DestinationName = input.ReadString();
            break;
          }
          case 114: {
            if (destinationIp_ == null) {
              destinationIp_ = new global::Istio.Policy.V1Beta1.IPAddress();
            }
            input.ReadMessage(destinationIp_);
            break;
          }
          case 120: {
            RequestSize = input.ReadInt64();
            break;
          }
          case 128: {
            RequestTotalSize = input.ReadInt64();
            break;
          }
          case 136: {
            ResponseSize = input.ReadInt64();
            break;
          }
          case 144: {
            ResponseTotalSize = input.ReadInt64();
            break;
          }
          case 154: {
            ApiProtocol = input.ReadString();
            break;
          }
          case 578365818: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Contains inferred type information about specific instance of 'tracespan' template. This is passed to
  /// infrastructure backends during configuration-time through [InfrastructureBackend.CreateSession][TODO: Link to this fragment].
  /// </summary>
  public sealed partial class Type : pb::IMessage<Type> {
    private static readonly pb::MessageParser<Type> _parser = new pb::MessageParser<Type>(() => new Type());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Type> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracespan.TracespanHandlerServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Type() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Type(Type other) : this() {
      spanTags_ = other.spanTags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Type Clone() {
      return new Type(this);
    }

    /// <summary>Field number for the "span_tags" field.</summary>
    public const int SpanTagsFieldNumber = 7;
    private static readonly pbc::MapField<string, global::Istio.Policy.V1Beta1.ValueType>.Codec _map_spanTags_codec
        = new pbc::MapField<string, global::Istio.Policy.V1Beta1.ValueType>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::Istio.Policy.V1Beta1.ValueType) x), 58);
    private readonly pbc::MapField<string, global::Istio.Policy.V1Beta1.ValueType> spanTags_ = new pbc::MapField<string, global::Istio.Policy.V1Beta1.ValueType>();
    /// <summary>
    /// Span tags are a set of &lt; key, value > pairs that provide metadata for the
    /// entire span. The values can be specified in the form of expressions.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Istio.Policy.V1Beta1.ValueType> SpanTags {
      get { return spanTags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Type);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Type other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!SpanTags.Equals(other.SpanTags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= SpanTags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      spanTags_.WriteTo(output, _map_spanTags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spanTags_.CalculateSize(_map_spanTags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Type other) {
      if (other == null) {
        return;
      }
      spanTags_.Add(other.spanTags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 58: {
            spanTags_.AddEntriesFrom(input, _map_spanTags_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents instance configuration schema for 'tracespan' template.
  /// </summary>
  public sealed partial class InstanceParam : pb::IMessage<InstanceParam> {
    private static readonly pb::MessageParser<InstanceParam> _parser = new pb::MessageParser<InstanceParam>(() => new InstanceParam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstanceParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracespan.TracespanHandlerServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceParam(InstanceParam other) : this() {
      traceId_ = other.traceId_;
      spanId_ = other.spanId_;
      parentSpanId_ = other.parentSpanId_;
      spanName_ = other.spanName_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      spanTags_ = other.spanTags_.Clone();
      httpStatusCode_ = other.httpStatusCode_;
      clientSpan_ = other.clientSpan_;
      rewriteClientSpanId_ = other.rewriteClientSpanId_;
      sourceName_ = other.sourceName_;
      sourceIp_ = other.sourceIp_;
      destinationName_ = other.destinationName_;
      destinationIp_ = other.destinationIp_;
      requestSize_ = other.requestSize_;
      requestTotalSize_ = other.requestTotalSize_;
      responseSize_ = other.responseSize_;
      responseTotalSize_ = other.responseTotalSize_;
      apiProtocol_ = other.apiProtocol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceParam Clone() {
      return new InstanceParam(this);
    }

    /// <summary>Field number for the "trace_id" field.</summary>
    public const int TraceIdFieldNumber = 1;
    private string traceId_ = "";
    /// <summary>
    /// Trace ID is the unique identifier for a trace. All spans from the same
    /// trace share the same Trace ID.
    /// 
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "span_id" field.</summary>
    public const int SpanIdFieldNumber = 2;
    private string spanId_ = "";
    /// <summary>
    /// Span ID is the unique identifier for a span within a trace. It is assigned
    /// when the span is created.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpanId {
      get { return spanId_; }
      set {
        spanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_span_id" field.</summary>
    public const int ParentSpanIdFieldNumber = 3;
    private string parentSpanId_ = "";
    /// <summary>
    /// Parent Span ID is the unique identifier for a parent span of this span
    /// instance. If this is a root span, then this field MUST be empty.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "span_name" field.</summary>
    public const int SpanNameFieldNumber = 4;
    private string spanName_ = "";
    /// <summary>
    /// Span name is a description of the span's operation.
    /// 
    /// For example, the name can be a qualified method name or a file name
    /// and a line number where the operation is called. A best practice is to use
    /// the same display name within an application and at the same call point.
    /// This makes it easier to correlate spans in different traces.
    /// 
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpanName {
      get { return spanName_; }
      set {
        spanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private string startTime_ = "";
    /// <summary>
    /// The start time of the span.
    /// 
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private string endTime_ = "";
    /// <summary>
    /// The end time of the span.
    /// 
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "span_tags" field.</summary>
    public const int SpanTagsFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_spanTags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 58);
    private readonly pbc::MapField<string, string> spanTags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Span tags are a set of &lt; key, value > pairs that provide metadata for the
    /// entire span. The values can be specified in the form of expressions.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> SpanTags {
      get { return spanTags_; }
    }

    /// <summary>Field number for the "httpStatusCode" field.</summary>
    public const int HttpStatusCodeFieldNumber = 8;
    private string httpStatusCode_ = "";
    /// <summary>
    /// HTTP status code used to set the span status. If unset or set to 0, the
    /// span status will be assumed to be successful.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpStatusCode {
      get { return httpStatusCode_; }
      set {
        httpStatusCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_span" field.</summary>
    public const int ClientSpanFieldNumber = 9;
    private string clientSpan_ = "";
    /// <summary>
    /// client_span indicates the span kind. True for client spans and False or
    /// not provided for server spans. Using bool instead of enum is a temporary
    /// work around since mixer expression language does not yet support enum
    /// type.
    /// 
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientSpan {
      get { return clientSpan_; }
      set {
        clientSpan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rewrite_client_span_id" field.</summary>
    public const int RewriteClientSpanIdFieldNumber = 10;
    private string rewriteClientSpanId_ = "";
    /// <summary>
    /// rewrite_client_span_id is used to indicate whether to create a new client
    /// span id to accommodate Zipkin shared span model. Some tracing systems like
    /// Stackdriver separates a RPC into client span and server span. To solve this
    /// incompatibility, deterministically rewriting both span id of client span and
    /// parent span id of server span to the same newly generated id.
    /// 
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewriteClientSpanId {
      get { return rewriteClientSpanId_; }
      set {
        rewriteClientSpanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_name" field.</summary>
    public const int SourceNameFieldNumber = 11;
    private string sourceName_ = "";
    /// <summary>
    /// Identifies the source (client side) of this span.
    /// Should usually be set to `source.workload.name`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceName {
      get { return sourceName_; }
      set {
        sourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_ip" field.</summary>
    public const int SourceIpFieldNumber = 12;
    private string sourceIp_ = "";
    /// <summary>
    /// Client IP address. Should usually be set to `source.ip`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceIp {
      get { return sourceIp_; }
      set {
        sourceIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_name" field.</summary>
    public const int DestinationNameFieldNumber = 13;
    private string destinationName_ = "";
    /// <summary>
    /// Identifies the destination (server side) of this span.
    /// Should usually be set to `destination.workload.name`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationName {
      get { return destinationName_; }
      set {
        destinationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_ip" field.</summary>
    public const int DestinationIpFieldNumber = 14;
    private string destinationIp_ = "";
    /// <summary>
    /// Server IP address. Should usually be set to `destination.ip`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationIp {
      get { return destinationIp_; }
      set {
        destinationIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_size" field.</summary>
    public const int RequestSizeFieldNumber = 15;
    private string requestSize_ = "";
    /// <summary>
    /// Request body size. Should usually be set to `request.size`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestSize {
      get { return requestSize_; }
      set {
        requestSize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_total_size" field.</summary>
    public const int RequestTotalSizeFieldNumber = 16;
    private string requestTotalSize_ = "";
    /// <summary>
    /// Total request size (headers and body).
    /// Should usually be set to `request.total_size`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestTotalSize {
      get { return requestTotalSize_; }
      set {
        requestTotalSize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "response_size" field.</summary>
    public const int ResponseSizeFieldNumber = 17;
    private string responseSize_ = "";
    /// <summary>
    /// Response body size. Should usually be set to `response.size`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResponseSize {
      get { return responseSize_; }
      set {
        responseSize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "response_total_size" field.</summary>
    public const int ResponseTotalSizeFieldNumber = 18;
    private string responseTotalSize_ = "";
    /// <summary>
    /// Response total size (headers and body).
    /// Should usually be set to `response.total_size`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResponseTotalSize {
      get { return responseTotalSize_; }
      set {
        responseTotalSize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "api_protocol" field.</summary>
    public const int ApiProtocolFieldNumber = 19;
    private string apiProtocol_ = "";
    /// <summary>
    /// One of "http", "https", or "grpc" or any other value of
    /// the `api.protocol` attribute. Should usually be set to `api.protocol`.
    /// 
    /// Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApiProtocol {
      get { return apiProtocol_; }
      set {
        apiProtocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstanceParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstanceParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceId != other.TraceId) return false;
      if (SpanId != other.SpanId) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (SpanName != other.SpanName) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (!SpanTags.Equals(other.SpanTags)) return false;
      if (HttpStatusCode != other.HttpStatusCode) return false;
      if (ClientSpan != other.ClientSpan) return false;
      if (RewriteClientSpanId != other.RewriteClientSpanId) return false;
      if (SourceName != other.SourceName) return false;
      if (SourceIp != other.SourceIp) return false;
      if (DestinationName != other.DestinationName) return false;
      if (DestinationIp != other.DestinationIp) return false;
      if (RequestSize != other.RequestSize) return false;
      if (RequestTotalSize != other.RequestTotalSize) return false;
      if (ResponseSize != other.ResponseSize) return false;
      if (ResponseTotalSize != other.ResponseTotalSize) return false;
      if (ApiProtocol != other.ApiProtocol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (SpanId.Length != 0) hash ^= SpanId.GetHashCode();
      if (ParentSpanId.Length != 0) hash ^= ParentSpanId.GetHashCode();
      if (SpanName.Length != 0) hash ^= SpanName.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      hash ^= SpanTags.GetHashCode();
      if (HttpStatusCode.Length != 0) hash ^= HttpStatusCode.GetHashCode();
      if (ClientSpan.Length != 0) hash ^= ClientSpan.GetHashCode();
      if (RewriteClientSpanId.Length != 0) hash ^= RewriteClientSpanId.GetHashCode();
      if (SourceName.Length != 0) hash ^= SourceName.GetHashCode();
      if (SourceIp.Length != 0) hash ^= SourceIp.GetHashCode();
      if (DestinationName.Length != 0) hash ^= DestinationName.GetHashCode();
      if (DestinationIp.Length != 0) hash ^= DestinationIp.GetHashCode();
      if (RequestSize.Length != 0) hash ^= RequestSize.GetHashCode();
      if (RequestTotalSize.Length != 0) hash ^= RequestTotalSize.GetHashCode();
      if (ResponseSize.Length != 0) hash ^= ResponseSize.GetHashCode();
      if (ResponseTotalSize.Length != 0) hash ^= ResponseTotalSize.GetHashCode();
      if (ApiProtocol.Length != 0) hash ^= ApiProtocol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TraceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TraceId);
      }
      if (SpanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpanId);
      }
      if (ParentSpanId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParentSpanId);
      }
      if (SpanName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SpanName);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(StartTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EndTime);
      }
      spanTags_.WriteTo(output, _map_spanTags_codec);
      if (HttpStatusCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HttpStatusCode);
      }
      if (ClientSpan.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ClientSpan);
      }
      if (RewriteClientSpanId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RewriteClientSpanId);
      }
      if (SourceName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SourceName);
      }
      if (SourceIp.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SourceIp);
      }
      if (DestinationName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(DestinationName);
      }
      if (DestinationIp.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(DestinationIp);
      }
      if (RequestSize.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(RequestSize);
      }
      if (RequestTotalSize.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(RequestTotalSize);
      }
      if (ResponseSize.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ResponseSize);
      }
      if (ResponseTotalSize.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ResponseTotalSize);
      }
      if (ApiProtocol.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ApiProtocol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceId);
      }
      if (SpanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpanId);
      }
      if (ParentSpanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentSpanId);
      }
      if (SpanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpanName);
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      size += spanTags_.CalculateSize(_map_spanTags_codec);
      if (HttpStatusCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpStatusCode);
      }
      if (ClientSpan.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientSpan);
      }
      if (RewriteClientSpanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewriteClientSpanId);
      }
      if (SourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceName);
      }
      if (SourceIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceIp);
      }
      if (DestinationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationName);
      }
      if (DestinationIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationIp);
      }
      if (RequestSize.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestSize);
      }
      if (RequestTotalSize.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RequestTotalSize);
      }
      if (ResponseSize.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ResponseSize);
      }
      if (ResponseTotalSize.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ResponseTotalSize);
      }
      if (ApiProtocol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ApiProtocol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstanceParam other) {
      if (other == null) {
        return;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.SpanId.Length != 0) {
        SpanId = other.SpanId;
      }
      if (other.ParentSpanId.Length != 0) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.SpanName.Length != 0) {
        SpanName = other.SpanName;
      }
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      spanTags_.Add(other.spanTags_);
      if (other.HttpStatusCode.Length != 0) {
        HttpStatusCode = other.HttpStatusCode;
      }
      if (other.ClientSpan.Length != 0) {
        ClientSpan = other.ClientSpan;
      }
      if (other.RewriteClientSpanId.Length != 0) {
        RewriteClientSpanId = other.RewriteClientSpanId;
      }
      if (other.SourceName.Length != 0) {
        SourceName = other.SourceName;
      }
      if (other.SourceIp.Length != 0) {
        SourceIp = other.SourceIp;
      }
      if (other.DestinationName.Length != 0) {
        DestinationName = other.DestinationName;
      }
      if (other.DestinationIp.Length != 0) {
        DestinationIp = other.DestinationIp;
      }
      if (other.RequestSize.Length != 0) {
        RequestSize = other.RequestSize;
      }
      if (other.RequestTotalSize.Length != 0) {
        RequestTotalSize = other.RequestTotalSize;
      }
      if (other.ResponseSize.Length != 0) {
        ResponseSize = other.ResponseSize;
      }
      if (other.ResponseTotalSize.Length != 0) {
        ResponseTotalSize = other.ResponseTotalSize;
      }
      if (other.ApiProtocol.Length != 0) {
        ApiProtocol = other.ApiProtocol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TraceId = input.ReadString();
            break;
          }
          case 18: {
            SpanId = input.ReadString();
            break;
          }
          case 26: {
            ParentSpanId = input.ReadString();
            break;
          }
          case 34: {
            SpanName = input.ReadString();
            break;
          }
          case 42: {
            StartTime = input.ReadString();
            break;
          }
          case 50: {
            EndTime = input.ReadString();
            break;
          }
          case 58: {
            spanTags_.AddEntriesFrom(input, _map_spanTags_codec);
            break;
          }
          case 66: {
            HttpStatusCode = input.ReadString();
            break;
          }
          case 74: {
            ClientSpan = input.ReadString();
            break;
          }
          case 82: {
            RewriteClientSpanId = input.ReadString();
            break;
          }
          case 90: {
            SourceName = input.ReadString();
            break;
          }
          case 98: {
            SourceIp = input.ReadString();
            break;
          }
          case 106: {
            DestinationName = input.ReadString();
            break;
          }
          case 114: {
            DestinationIp = input.ReadString();
            break;
          }
          case 122: {
            RequestSize = input.ReadString();
            break;
          }
          case 130: {
            RequestTotalSize = input.ReadString();
            break;
          }
          case 138: {
            ResponseSize = input.ReadString();
            break;
          }
          case 146: {
            ResponseTotalSize = input.ReadString();
            break;
          }
          case 154: {
            ApiProtocol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
